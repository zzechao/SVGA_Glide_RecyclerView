package com.zhouz.plugin

import org.objectweb.asm.Opcodes.GETSTATIC
import org.objectweb.asm.Opcodes.INVOKESPECIAL
import org.objectweb.asm.Opcodes.NEW
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.Label
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes.ACONST_NULL
import org.objectweb.asm.Opcodes.ALOAD
import org.objectweb.asm.Opcodes.ASTORE
import org.objectweb.asm.Opcodes.CHECKCAST
import org.objectweb.asm.Opcodes.DUP
import org.objectweb.asm.Opcodes.GETFIELD
import org.objectweb.asm.Opcodes.GOTO
import org.objectweb.asm.Opcodes.IADD
import org.objectweb.asm.Opcodes.ICONST_0
import org.objectweb.asm.Opcodes.IFEQ
import org.objectweb.asm.Opcodes.IFNULL
import org.objectweb.asm.Opcodes.ILOAD
import org.objectweb.asm.Opcodes.INVOKEINTERFACE
import org.objectweb.asm.Opcodes.INVOKESTATIC
import org.objectweb.asm.Opcodes.INVOKEVIRTUAL
import org.objectweb.asm.Opcodes.IRETURN
import org.objectweb.asm.Opcodes.ISTORE
import org.objectweb.asm.Opcodes.NOP
import org.objectweb.asm.Opcodes.POP


/**
 * @author:zhouz
 * @date: 2024/8/8 18:33
 * description：修改SVGAGlideResourceDelegate的修改
 */
class SVGAGlideResourceDelegateVisitor(api: Int, cv: ClassVisitor) : ClassVisitor(api, cv) {

    override fun visitMethod(access: Int, name: String?, descriptor: String?, signature: String?, exceptions: Array<out String>?): MethodVisitor {
        return when (name) {
            "getSize" -> {
                object : MethodVisitor(api, super.visitMethod(access, name, descriptor, signature, exceptions)) {
                    val label0 = Label()
                    val label1 = Label()
                    val label2 = Label()
                    val label3 = Label()
                    val label4 = Label()
                    val label5 = Label()
                    val label8 = Label()
                    override fun visitCode() {
                        super.visitCode()
                        mv.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable")
                        mv.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable")
                        mv.visitInsn(ICONST_0)
                        mv.visitVarInsn(ISTORE, 1)
                        mv.visitLabel(label3)
                        mv.visitInsn(NOP)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "resource", "Lcom/svga/glide/SVGAResource;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAResource", "getVideoItem", "()Lcom/opensource/svgaplayer/SVGAVideoEntity;", false)
                        mv.visitInsn(DUP)
                        val label6 = Label()
                        mv.visitJumpInsn(IFNULL, label6)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/opensource/svgaplayer/SVGAVideoEntity", "getImageMap\$com_opensource_svgaplayer", "()Ljava/util/HashMap;", false)
                        val label7 = Label()
                        mv.visitJumpInsn(GOTO, label7)
                        mv.visitLabel(label6)
                        mv.visitInsn(POP)
                        mv.visitInsn(ACONST_NULL)
                        mv.visitLabel(label7)
                        mv.visitVarInsn(ASTORE, 2)
                        mv.visitVarInsn(ALOAD, 2)
                        mv.visitInsn(DUP)
                        mv.visitJumpInsn(IFNULL, label8)
                        mv.visitTypeInsn(CHECKCAST, "java/util/Map")
                        mv.visitVarInsn(ASTORE, 3)
                    }

                    override fun visitInsn(opcode: Int) {
                        if (opcode == IRETURN) {
                            mv.visitVarInsn(ISTORE, 4)
                            mv.visitVarInsn(ALOAD, 3)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true)
                            mv.visitVarInsn(ASTORE, 5)
                            val label9 = Label()
                            mv.visitLabel(label9)
                            mv.visitVarInsn(ALOAD, 5)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true)
                            val label10 = Label()
                            mv.visitJumpInsn(IFEQ, label10)
                            mv.visitVarInsn(ALOAD, 5)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true)
                            mv.visitTypeInsn(CHECKCAST, "java/util/Map\$Entry")
                            mv.visitVarInsn(ASTORE, 6)
                            mv.visitVarInsn(ALOAD, 6)
                            mv.visitVarInsn(ASTORE, 7)
                            mv.visitInsn(ICONST_0)
                            mv.visitVarInsn(ISTORE, 8)
                            mv.visitVarInsn(ILOAD, 1)
                            mv.visitVarInsn(ALOAD, 7)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map\$Entry", "getValue", "()Ljava/lang/Object;", true)
                            mv.visitTypeInsn(CHECKCAST, "android/graphics/Bitmap")
                            mv.visitMethodInsn(INVOKESTATIC, "com/bumptech/glide/util/Util", "getBitmapByteSize", "(Landroid/graphics/Bitmap;)I", false)
                            mv.visitInsn(IADD)
                            mv.visitVarInsn(ISTORE, 1)
                            mv.visitInsn(NOP)
                            mv.visitJumpInsn(GOTO, label9)
                            mv.visitLabel(label10)
                            mv.visitInsn(NOP)
                            val label11 = Label()
                            mv.visitJumpInsn(GOTO, label11)
                            mv.visitLabel(label8)
                            mv.visitInsn(POP)
                            mv.visitInsn(NOP)
                            mv.visitLabel(label4)
                            mv.visitJumpInsn(GOTO, label11)
                            mv.visitLabel(label5)
                            mv.visitVarInsn(ASTORE, 2)
                            mv.visitLabel(label0)
                            mv.visitInsn(NOP)
                            mv.visitVarInsn(ALOAD, 0)
                            mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "resource", "Lcom/svga/glide/SVGAResource;")
                            mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAResource", "getImageMapField", "()Lcom/svga/glide/util/ReflectUtils;", false)
                            mv.visitInsn(DUP)
                            val label12 = Label()
                            mv.visitJumpInsn(IFNULL, label12)
                            mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/util/ReflectUtils", "get", "()Ljava/lang/Object;", false)
                            mv.visitTypeInsn(CHECKCAST, "java/util/HashMap")
                            val label13 = Label()
                            mv.visitJumpInsn(GOTO, label13)
                            mv.visitLabel(label12)
                            mv.visitInsn(POP)
                            mv.visitInsn(ACONST_NULL)
                            mv.visitLabel(label13)
                            mv.visitVarInsn(ASTORE, 3)
                            mv.visitVarInsn(ALOAD, 3)
                            mv.visitInsn(DUP)
                            val label14 = Label()
                            mv.visitJumpInsn(IFNULL, label14)
                            mv.visitTypeInsn(CHECKCAST, "java/util/Map")
                            mv.visitVarInsn(ASTORE, 4)
                            mv.visitInsn(ICONST_0)
                            mv.visitVarInsn(ISTORE, 5)
                            mv.visitVarInsn(ALOAD, 4)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true)
                            mv.visitVarInsn(ASTORE, 6)
                            val label15 = Label()
                            mv.visitLabel(label15)
                            mv.visitVarInsn(ALOAD, 6)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true)
                            val label16 = Label()
                            mv.visitJumpInsn(IFEQ, label16)
                            mv.visitVarInsn(ALOAD, 6)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true)
                            mv.visitTypeInsn(CHECKCAST, "java/util/Map\$Entry")
                            mv.visitVarInsn(ASTORE, 7)
                            mv.visitVarInsn(ALOAD, 7)
                            mv.visitVarInsn(ASTORE, 8)
                            mv.visitInsn(ICONST_0)
                            mv.visitVarInsn(ISTORE, 9)
                            mv.visitVarInsn(ILOAD, 1)
                            mv.visitVarInsn(ALOAD, 8)
                            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map\$Entry", "getValue", "()Ljava/lang/Object;", true)
                            mv.visitTypeInsn(CHECKCAST, "android/graphics/Bitmap")
                            mv.visitMethodInsn(INVOKESTATIC, "com/bumptech/glide/util/Util", "getBitmapByteSize", "(Landroid/graphics/Bitmap;)I", false)
                            mv.visitInsn(IADD)
                            mv.visitVarInsn(ISTORE, 1)
                            mv.visitInsn(NOP)
                            mv.visitJumpInsn(GOTO, label15)
                            mv.visitLabel(label16)
                            mv.visitInsn(NOP)
                            mv.visitJumpInsn(GOTO, label11)
                            mv.visitLabel(label14)
                            mv.visitInsn(POP)
                            mv.visitInsn(NOP)
                            mv.visitLabel(label1)
                            mv.visitJumpInsn(GOTO, label11)
                            mv.visitLabel(label2)
                            mv.visitVarInsn(ASTORE, 3)
                            mv.visitLabel(label11)
                            mv.visitVarInsn(ILOAD, 1)
                        }
                        super.visitInsn(opcode)
                    }

                    override fun visitMaxs(maxStack: Int, maxLocals: Int) {
                        super.visitMaxs(2, 10)
                    }
                }
            }

            "recycle" -> {
                object : MethodVisitor(api, super.visitMethod(access, name, descriptor, signature, exceptions)) {
                    override fun visitCode() {
                        super.visitCode()
                        val label0 = Label()
                        val label1 = Label()
                        val label2 = Label()
                        mv.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable")
                        val label3 = Label()
                        val label4 = Label()
                        val label5 = Label()
                        mv.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable")
                        mv.visitLabel(label3)
                        mv.visitInsn(NOP)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "resource", "Lcom/svga/glide/SVGAResource;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAResource", "getVideoItem", "()Lcom/opensource/svgaplayer/SVGAVideoEntity;", false)
                        mv.visitInsn(DUP)
                        val label6 = Label()
                        mv.visitJumpInsn(IFNULL, label6)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/opensource/svgaplayer/SVGAVideoEntity", "getImageMap\$com_opensource_svgaplayer", "()Ljava/util/HashMap;", false)
                        val label7 = Label()
                        mv.visitJumpInsn(GOTO, label7)
                        mv.visitLabel(label6)
                        mv.visitInsn(POP)
                        mv.visitInsn(ACONST_NULL)
                        mv.visitLabel(label7)
                        mv.visitVarInsn(ASTORE, 1)
                        mv.visitFieldInsn(GETSTATIC, "com/svga/glide/SVGAGlideEx", "INSTANCE", "Lcom/svga/glide/SVGAGlideEx;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAGlideEx", "getLog", "()Lcom/svga/glide/log/ILog;", false)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "TAG", "Ljava/lang/String;")
                        mv.visitTypeInsn(NEW, "java/lang/StringBuilder")
                        mv.visitInsn(DUP)
                        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false)
                        mv.visitLdcInsn("recycle ")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "resource", "Lcom/svga/glide/SVGAResource;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAResource", "getModel", "()Ljava/lang/String;", false)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false)
                        mv.visitLdcInsn(" size:")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false)
                        mv.visitVarInsn(ALOAD, 1)
                        mv.visitInsn(DUP)
                        val label8 = Label()
                        mv.visitJumpInsn(IFNULL, label8)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "size", "()I", false)
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false)
                        val label9 = Label()
                        mv.visitJumpInsn(GOTO, label9)
                        mv.visitLabel(label8)
                        mv.visitInsn(POP)
                        mv.visitInsn(ACONST_NULL)
                        mv.visitLabel(label9)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false)
                        mv.visitMethodInsn(INVOKEINTERFACE, "com/svga/glide/log/ILog", "d", "(Ljava/lang/String;Ljava/lang/String;)V", true)
                        mv.visitVarInsn(ALOAD, 1)
                        mv.visitInsn(DUP)
                        val label10 = Label()
                        mv.visitJumpInsn(IFNULL, label10)
                        mv.visitTypeInsn(CHECKCAST, "java/util/Map")
                        mv.visitVarInsn(ASTORE, 2)
                        mv.visitInsn(ICONST_0)
                        mv.visitVarInsn(ISTORE, 3)
                        mv.visitVarInsn(ALOAD, 2)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true)
                        mv.visitVarInsn(ASTORE, 4)
                        val label11 = Label()
                        mv.visitLabel(label11)
                        mv.visitVarInsn(ALOAD, 4)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true)
                        val label12 = Label()
                        mv.visitJumpInsn(IFEQ, label12)
                        mv.visitVarInsn(ALOAD, 4)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true)
                        mv.visitTypeInsn(CHECKCAST, "java/util/Map\$Entry")
                        mv.visitVarInsn(ASTORE, 5)
                        mv.visitVarInsn(ALOAD, 5)
                        mv.visitVarInsn(ASTORE, 6)
                        mv.visitInsn(ICONST_0)
                        mv.visitVarInsn(ISTORE, 7)
                        mv.visitFieldInsn(GETSTATIC, "com/svga/glide/SVGAGlideEx", "INSTANCE", "Lcom/svga/glide/SVGAGlideEx;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAGlideEx", "getBitmapPool", "()Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;", false)
                        mv.visitVarInsn(ALOAD, 6)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map\$Entry", "getValue", "()Ljava/lang/Object;", true)
                        mv.visitTypeInsn(CHECKCAST, "android/graphics/Bitmap")
                        mv.visitMethodInsn(INVOKEINTERFACE, "com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool", "put", "(Landroid/graphics/Bitmap;)V", true)
                        mv.visitInsn(NOP)
                        mv.visitJumpInsn(GOTO, label11)
                        mv.visitLabel(label12)
                        mv.visitInsn(NOP)
                        val label13 = Label()
                        mv.visitJumpInsn(GOTO, label13)
                        mv.visitLabel(label10)
                        mv.visitInsn(POP)
                        mv.visitInsn(NOP)
                        mv.visitLabel(label4)
                        mv.visitJumpInsn(GOTO, label13)
                        mv.visitLabel(label5)
                        mv.visitVarInsn(ASTORE, 1)
                        mv.visitLabel(label0)
                        mv.visitInsn(NOP)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "resource", "Lcom/svga/glide/SVGAResource;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAResource", "getImageMapField", "()Lcom/svga/glide/util/ReflectUtils;", false)
                        mv.visitInsn(DUP)
                        val label14 = Label()
                        mv.visitJumpInsn(IFNULL, label14)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/util/ReflectUtils", "get", "()Ljava/lang/Object;", false)
                        mv.visitTypeInsn(CHECKCAST, "java/util/HashMap")
                        val label15 = Label()
                        mv.visitJumpInsn(GOTO, label15)
                        mv.visitLabel(label14)
                        mv.visitInsn(POP)
                        mv.visitInsn(ACONST_NULL)
                        mv.visitLabel(label15)
                        mv.visitVarInsn(ASTORE, 2)
                        mv.visitFieldInsn(GETSTATIC, "com/svga/glide/SVGAGlideEx", "INSTANCE", "Lcom/svga/glide/SVGAGlideEx;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAGlideEx", "getLog", "()Lcom/svga/glide/log/ILog;", false)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "TAG", "Ljava/lang/String;")
                        mv.visitTypeInsn(NEW, "java/lang/StringBuilder")
                        mv.visitInsn(DUP)
                        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false)
                        mv.visitLdcInsn("recycle ")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false)
                        mv.visitVarInsn(ALOAD, 0)
                        mv.visitFieldInsn(GETFIELD, "com/svga/glide/SVGAGlideResourceDelegate", "resource", "Lcom/svga/glide/SVGAResource;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAResource", "getModel", "()Ljava/lang/String;", false)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false)
                        mv.visitLdcInsn(" size:")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false)
                        mv.visitVarInsn(ALOAD, 2)
                        mv.visitInsn(DUP)
                        val label16 = Label()
                        mv.visitJumpInsn(IFNULL, label16)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "size", "()I", false)
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false)
                        val label17 = Label()
                        mv.visitJumpInsn(GOTO, label17)
                        mv.visitLabel(label16)
                        mv.visitInsn(POP)
                        mv.visitInsn(ACONST_NULL)
                        mv.visitLabel(label17)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false)
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false)
                        mv.visitMethodInsn(INVOKEINTERFACE, "com/svga/glide/log/ILog", "d", "(Ljava/lang/String;Ljava/lang/String;)V", true)
                        mv.visitVarInsn(ALOAD, 2)
                        mv.visitInsn(DUP)
                        val label18 = Label()
                        mv.visitJumpInsn(IFNULL, label18)
                        mv.visitTypeInsn(CHECKCAST, "java/util/Map")
                        mv.visitVarInsn(ASTORE, 3)
                        mv.visitInsn(ICONST_0)
                        mv.visitVarInsn(ISTORE, 4)
                        mv.visitVarInsn(ALOAD, 3)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "entrySet", "()Ljava/util/Set;", true)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "iterator", "()Ljava/util/Iterator;", true)
                        mv.visitVarInsn(ASTORE, 5)
                        val label19 = Label()
                        mv.visitLabel(label19)
                        mv.visitVarInsn(ALOAD, 5)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true)
                        val label20 = Label()
                        mv.visitJumpInsn(IFEQ, label20)
                        mv.visitVarInsn(ALOAD, 5)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true)
                        mv.visitTypeInsn(CHECKCAST, "java/util/Map\$Entry")
                        mv.visitVarInsn(ASTORE, 6)
                        mv.visitVarInsn(ALOAD, 6)
                        mv.visitVarInsn(ASTORE, 7)
                        mv.visitInsn(ICONST_0)
                        mv.visitVarInsn(ISTORE, 8)
                        mv.visitFieldInsn(GETSTATIC, "com/svga/glide/SVGAGlideEx", "INSTANCE", "Lcom/svga/glide/SVGAGlideEx;")
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/svga/glide/SVGAGlideEx", "getBitmapPool", "()Lcom/bumptech/glide/load/engine/bitmap_recycle/BitmapPool;", false)
                        mv.visitVarInsn(ALOAD, 7)
                        mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map\$Entry", "getValue", "()Ljava/lang/Object;", true)
                        mv.visitTypeInsn(CHECKCAST, "android/graphics/Bitmap")
                        mv.visitMethodInsn(INVOKEINTERFACE, "com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool", "put", "(Landroid/graphics/Bitmap;)V", true)
                        mv.visitInsn(NOP)
                        mv.visitJumpInsn(GOTO, label19)
                        mv.visitLabel(label20)
                        mv.visitInsn(NOP)
                        mv.visitJumpInsn(GOTO, label13)
                        mv.visitLabel(label18)
                        mv.visitInsn(POP)
                        mv.visitInsn(NOP)
                        mv.visitLabel(label1)
                        mv.visitJumpInsn(GOTO, label13)
                        mv.visitLabel(label2)
                        mv.visitVarInsn(ASTORE, 2)
                        mv.visitLabel(label13)
                    }

                    override fun visitMaxs(maxStack: Int, maxLocals: Int) {
                        super.visitMaxs(5, 9)
                    }
                }
            }

            else -> {
                super.visitMethod(access, name, descriptor, signature, exceptions)
            }
        }
    }
}