apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'

android {
    compileSdkVersion 31
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
    }
    compileOptions {
        kotlinOptions.freeCompilerArgs += ['-module-name', "com.opensource.svgaplayer"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.squareup.wire:wire-runtime:3.7.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    kapt 'com.github.bumptech.glide:compiler:4.13.2'
}

release {
    failOnUnversionedFiles = false
    failOnCommitNeeded = false
    failOnUpdateNeeded = false
    //failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    //buildTasks = ['publish'] ////定义发布时该执行哪个task
    versionPropertyFile = '../gradle.properties'
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

//publishing {
//    publications {
//        mavenAar(MavenPublication) {
//            groupId 'com.duowan.mobile'
//            artifactId 'SVGAPlayer-Android'
//            version "$version"
//            from components.android
//            artifact sourcesJar
//            sourceSets {
//                main {
//                    java {
//                        include '**/*.java'
//                        include '**/*.kt'
//                    }
//                }
//            }
//        }
//    }
//}
//
//publishing {
//    repositories {
//        maven {
//            credentials {
//                username = getRepositoryUsername()
//                password = getRepositoryPassword()
//            }
//
//            if(isReleaseBuild()) {
//                url getReleaseRepositoryUrl()
//            } else {
//                url getSnapshotRepositoryUrl()
//            }
//        }
//    }
//}
